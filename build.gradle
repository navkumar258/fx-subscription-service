plugins {
    id 'java'
    id 'org.springframework.boot' version "${vSpringBootPlugin}"
    id 'io.spring.dependency-management' version "${vSpringDependencyManagementPlugin}"
    id 'jacoco'
    id 'org.springdoc.openapi-gradle-plugin' version "${vSpringDocOpenApiPlugin}"
    id 'io.gatling.gradle' version "${vGatlingPlugin}"
}

group = 'com.example'
version = '3.0.9'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    withoutCommonsLang3 = {
        exclude group: 'org.apache.commons', module: 'commons-lang3'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // for redis as cache
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation "io.hypersistence:hypersistence-utils-hibernate-63:${vHypersistenceUtilsHibernate63}"
    implementation "io.jsonwebtoken:jjwt-api:${vJjwtApi}"
    implementation 'org.springframework.ai:spring-ai-starter-mcp-server-webmvc'
    // for micrometer observation, metrics & logging
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "com.github.loki4j:loki-logback-appender:${vLokiLogbackAppender}"
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
    // for openapi spec generation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:${vSpringDocWebMvcApi}", withoutCommonsLang3
    implementation "org.apache.commons:commons-lang3:${vCommonsLang3}"
    runtimeOnly 'com.h2database:h2'

    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${vJjwtImpl}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${vJjwtJackson}"
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'net.bytebuddy:byte-buddy-agent'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'com.redis:testcontainers-redis'
    testRuntimeOnly 'org.springframework.kafka:spring-kafka-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${vSpringAi}"
    }
}

jacoco {
    toolVersion = "${vJacocoTool}"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        html.required = true
        csv.required = false
    }

    // Exclude specific classes/packages from coverage
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/FxSubscriptionServiceApplication.class',
                    '**/dto/**',
                    '**/exception/**',
                    '**/model/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/FxSubscriptionServiceApplication.class',
                    '**/dto/**',
                    '**/exception/**',
                    '**/model/**'
            ])
        }))
    }

    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.85  // 85% line coverage required
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.95  // 95% branch coverage required
            }
        }
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.85  // 85% method coverage required
            }
        }
        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.90  // 90% class coverage required
            }
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    doFirst {
        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_16)) {
            jvmArgs = [
                    "-javaagent:${classpath.find { it.name.contains("byte-buddy-agent") }.absolutePath}"
            ]
        }
    }
}

// Task to run tests with coverage verification
tasks.register('testWithCoverage') {
    dependsOn test, jacocoTestReport, jacocoTestCoverageVerification
    group = 'verification'
    description = 'Run tests and verify code coverage'
}

// Task to generate coverage report only
tasks.register('coverageReport') {
    dependsOn jacocoTestReport
    group = 'reporting'
    description = 'Generate code coverage report'
}

openApi {
    apiDocsUrl.set("https://localhost:8443/v3/api-docs")
    trustStore.set(System.getenv("FX_KEYSTORE_LOCATION"))
    trustStorePassword.set(System.getenv("FX_KEYSTORE_PASSWORD")?.toCharArray())

    outputDir.set(file("$rootDir/api-docs"))
    outputFileName.set("fx-subscription-service.json")

    customBootRun {
        args = ["--spring.profiles.active=openapi"]
    }
}

tasks.named("build") {
    finalizedBy("generateOpenApiDocs")
}
