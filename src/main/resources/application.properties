spring.application.name=fx-subscription-service

outbox.subscriptions.check.rate=300000

spring.ssl.bundle.jks.fx-subscription-service.key.alias=fx-subscription-service
spring.ssl.bundle.jks.fx-subscription-service.key.password=${FX_KEYSTORE_PASSWORD:test}
spring.ssl.bundle.jks.fx-subscription-service.keystore.location=${FX_KEYSTORE_LOCATION:classpath:keystore.p12}
spring.ssl.bundle.jks.fx-subscription-service.keystore.password=${FX_KEYSTORE_PASSWORD:test}
spring.ssl.bundle.jks.fx-subscription-service.keystore.type=PKCS12
#spring.ssl.bundle.jks.web-server.truststore.location=classpath:truststore.p12
#spring.ssl.bundle.jks.web-server.truststore.password=truststore-password
#spring.ssl.bundle.jks.web-server.truststore.type=PKCS12
spring.ssl.bundle.jks.web-server.reload-on-update=false

server.port=8443

server.ssl.bundle=fx-subscription-service
server.ssl.client-auth=NONE

security.jwt.token.secret-key=${FX_JWT_SECRET_KEY:test}
security.jwt.token.expire-length=600000

spring.datasource.url=jdbc:postgresql://${FX_POSTGRES_HOST:localhost:5432}/${FX_POSTGRES_DB:fx_subscription_db}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=${FX_POSTGRES_USER:postgres}
spring.datasource.password=${FX_POSTGRES_PASSWORD:password}
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000

spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.open-in-view=false

spring.threads.virtual.enabled=true

spring.kafka.bootstrap-servers=${FX_KAFKA_HOST:localhost:9092}
spring.kafka.topic.subscription-changes=subscription-change-events

spring.data.redis.host=${FX_REDIS_HOST:localhost}
spring.data.redis.port=${FX_REDIS_PORT:6379}
spring.cache.type=redis
spring.cache.redis.cache-null-values=false
spring.cache.redis.time-to-live-seconds=300

# expose actuator health endpoint
management.endpoints.web.exposure.include=health,prometheus
management.endpoint.health.show-details=always
management.endpoint.prometheus.enabled=true

# All traces should be sent to the latency analysis tool
management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint=${FX_ZIPKIN_HOST:http://localhost:9411}/api/v2/spans

# For Exemplars to work, we need histogram buckets
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# traceID and spanId are predefined MDC keys - we want the logs to include them
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
spring.logging.loki.host=${FX_LOKI_HOST:http://localhost:3100}
