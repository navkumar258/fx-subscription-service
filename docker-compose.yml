services:
  web-service:
    container_name: web-service
    build:
      context: .
      dockerfile: Dockerfile.local
      args:
        KEYSTORE_PATH: ${FX_KEYSTORE_LOCATION}
    environment:
      FX_POSTGRES_HOST: postgres:5432
      FX_POSTGRES_DB: fx_subscription_db
      FX_POSTGRES_USER: postgres
      FX_POSTGRES_PASSWORD: password
      FX_KEYSTORE_PASSWORD: ${FX_KEYSTORE_PASSWORD}
      FX_JWT_SECRET_KEY: ${FX_JWT_SECRET_KEY}
      FX_KAFKA_HOST: kafka:29092
      FX_ZIPKIN_HOST: http://zipkin:9411
    ports:
      - "8443:8443"
    depends_on:
      - postgres
      - kafka

  postgres:
    image: postgres:17.5
    container_name: postgres
    environment:
      POSTGRES_DB: fx_subscription_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: apache/kafka:3.9.1
    container_name: kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:9093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  redis:
    image: redis:8.2.0-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data:
    driver: local